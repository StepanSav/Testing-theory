
1. Требования это что?
  Требования представляют собой детальные описания того, что система должна выполнять, как она должна функционировать и какими характеристиками должна обладать. Они служат основой для разработки, тестирования и валидации   программного продукта
  
2. Для чего нужен Анализ требований в разработке программного обеспечения?
  Цель анализа требований - определить потребности пользователей и перевести их в конкретные, измеримые и достижимые требования, которые команда разработчиков программного обеспечения может использовать для       
  проектирования и разработки системы
  
3.Перечислите Виды требований
  Функциональные требования – они определяют именно функции и возможности, которыми должен обладать продукт.
  Нефункциональные требования – это характеристики конкретной системы: безопасность, совместимость, производительность и т.д.
    Также можно разделить требования на 3 категории:
  Явные – базовый тип требований. Это то, что клиент передает специалистам в виде документации с описанием каркаса ПО, критериев приема, спецификации дизайна. Иногда эти требования могут быть переданы в частной 
    переписке, маркетинговых инструментах и т.д.;
  Неявные – это то, что клиент хочет видеть, но не упоминает, полагаясь на профессионализм разработчиков. Сюда могут входить производительность, доступность, безопасность и другие параметры. Неявные требования должны 
    быть в тестировании обязательно, чтобы обеспечить нефункциональный компонент продукта;
  Скрытые – то, что клиент не ожидает увидеть/не знает о таких возможностях, но это может быть использовано для увеличения конкурентоспособности продукта, модернизации. Например, это различные анимации, мелкие функции,       заполняющие пустые пространства
  
4. Функциональные уровни требований
  Бизнес-требования: Определяют высокоуровневые цели и задачи, которые система должна решить для бизнеса.
  Пользовательские требования: Описывают, что пользователи ожидают от системы и какие функции они должны иметь возможность выполнять.
  Функциональные требования: Конкретизируют пользовательские требования и описывают, как система должна вести себя в различных ситуациях.
  
5. Нефункциональные уровни требований
  Производительность: Требования к скорости обработки данных и времени отклика.
  Надежность: Ожидаемая доступность системы и ее устойчивость к сбоям.
  Безопасность: Защита данных и системы от несанкционированного доступа.
  Удобство использования: Уровень удобства интерфейса для пользователей.

6. Техники сбора требований
  Интервью: Личное общение с заинтересованными сторонами для выявления их потребностей.
  Анкеты и опросы: Сбор информации от пользователей через структурированные вопросы.
  Мозговые штурмы: Генерация идей в группе для выявления требований.
  Анализ документации: Изучение существующих документов и систем для выявления требований.

7. Спецификация требований программного обеспечения (SRS)
  Спецификация требований программного обеспечения (SRS) — это документ, который подробно описывает функциональные, нефункциональные и другие требования к системе, а также условия ее работы. SRS служит основой для 
  разработки, тестирования и верификации системы.

8. Что такое Use Case?
  Use Case (сценарий использования) — это описание взаимодействия пользователя с системой для достижения определенной цели. Он включает в себя основные действия пользователя и реакции системы.

9. Пример Use Case
  Название: Регистрация пользователя
  Актор: Новый пользователь
  Предусловие: Пользователь находится на странице регистрации.
  Основной сценарий:
  Пользователь вводит свои данные (имя, электронная почта, пароль).
  Система проверяет корректность данных.
  Система создает учетную запись и отправляет подтверждение на электронную почту.

10. Характеристики качества требований
  Четкость: Требования должны быть ясными и понятными.
  Пример: "Система должна отправлять уведомление пользователю при успешном завершении заказа."
  Полнота: Все необходимые функции должны быть описаны.
  Пример: "Система должна поддерживать функции добавления, редактирования и удаления товаров из корзины."
  Измеримость: Требования должны быть проверяемыми.
  Пример: "Система должна обрабатывать запросы пользователей за не более чем 2 секунды."
  Применимость: Требования должны быть выполнимыми в рамках проекта.
  Пример: "Система должна работать на всех современных браузерах."
  Приоритетность: Требования должны иметь четкий приоритет.
  Пример: "Функция регистрации пользователя имеет высокий приоритет."

12. Что такое Пользовательские истории (User story)?
  Пользовательская история — это краткое описание функциональности системы с точки зрения пользователя, формулируемое в формате "Как [тип пользователя], я хочу [действие], чтобы [цель]".

13. Пример Пользовательских историй
  "Как покупатель, я хочу иметь возможность добавлять товары в корзину, чтобы затем оформить заказ."

14. Преимущества и недостатки Пользовательских историй
  Преимущества
  Простота понимания и написания.
  Гибкость в изменениях требований.
  Фокус на потребностях пользователей.
  Недостатки
  Могут быть слишком общими без достаточной детализации.
  Не всегда охватывают все аспекты функциональности.

15. Что такое Критерии приемки (Acceptance criteria)?
  Критерии приемки — это набор условий, которые должны быть выполнены для того, чтобы работа была принята заказчиком или пользователем.

16. Виды и форматы критерий приемки
  Формальные критерии: Определяют конкретные требования к функциональности.
  Поведенческие сценарии: Описывают поведение системы в различных ситуациях.

17. Пример критерий приемки (список правил)
  Система должна позволять пользователю зарегистрироваться с действующей электронной почтой.
  Пользователь должен получать уведомление о подтверждении регистрации.

18. Пример критерий приемки (поведенческий сценарий)
  Если пользователь вводит неверный пароль три раза подряд, система должна временно заблокировать учетную запись на 10 минут.

19. Критерии INVEST для User story
  Independent (независимые): Истории должны быть независимыми друг от друга.
  Negotiable (обсуждаемые): Истории могут быть изменены или уточнены в процессе обсуждения.
  Valuable (ценные): Каждая история должна приносить ценность пользователю или бизнесу.
  Estimable (оценимые): Команда должна быть способна оценить объем работы по истории.
  Small (маленькие): Истории должны быть достаточно маленькими для выполнения за один спринт.
  Testable (тестируемые): Истории должны иметь четкие критерии приемки для тестирования.

20. Типы метрик тестирования
  Метрики покрытия тестов: Измеряют процент кода, покрытого тестами.
  Метрики дефектов: Отслеживают количество найденных дефектов за определенный период времени.
  Метрики производительности тестирования: Оценивают скорость выполнения тестов.
  Цели ввода метрик
  Оценка качества ПО
  Оптимизация процессов тестирования
  Улучшение планирования ресурсов

21. Что такое приемка приложения?
  Приемка приложения — это процесс проверки готового продукта на соответствие требованиям заказчика перед его развертыванием в рабочей среде.

22. Что такое аудит приложения?
  Аудит приложения — это независимая проверка программного обеспечения на соответствие установленным стандартам и требованиям безопасности.

23. Этапы проведения аудита
  Подготовка к аудиту
  Сбор данных
  Анализ данных
  Подготовка отчета
  Представление результатов

24. Чем приемка приложения отличается от аудита?
  Приемка приложения фокусируется на соответствии требованиям заказчика, тогда как аудит оценивает соответствие стандартам качества и безопасности.

25. Эстимация

26. Что такое эстимирование?
  Эстимирование — это процесс оценки времени и ресурсов, необходимых для выполнения проекта или его части.

27. Принципы эстимирования
  Основываться на фактических данных из предыдущих проектов.
  Учитывать неопределенности и риски.
  Привлекать команду разработки к процессу оценки.

28. Техники оценивания разработки программного обеспечения
  Метод экспертных оценок: Оценка времени выполнения задач на основе мнения экспертов.
  Пример: Команда собирается для обсуждения задач проекта и дает свои оценки времени выполнения каждой задачи.
  Метод аналогий: Использование данных из предыдущих проектов для оценки нового проекта.
  Пример: Если аналогичный проект занял 3 месяца, можно предположить, что новый проект займет аналогичное время.
  Метод Planning Poker: Команда оценивает задачи с помощью карточек с числами Фибоначчи для достижения консенсуса по оценкам времени.
  Пример: Каждый участник команды выбирает карточку с оценкой времени для задачи, затем обсуждают разногласия до достижения согласия.

30. Что такое Риск (Risks)
  Риск в контексте разработки ПО — это вероятность наступления события, которое может негативно повлиять на проект, включая задержки в графике, превышение бюджета или снижение качества продукта.
