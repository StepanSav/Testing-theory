Тест-план — это артефакт тестирования, описывающий действия, которые будут происходить в процессе тестирования—стратегию, цели, подходы, ресурсы, риски и др.

Что должен описывать тест план?
Тест план должен описывать:
Цели и задачи тестирования
Объекты тестирования
Стратегии и методы тестирования
Расписание и сроки выполнения
Необходимые ресурсы (человеческие и технические)
Оценка рисков и способы их разрешения

Какие вы знаете Виды тест планов?
●Мастер Тест-план (Master Test Plan)
●Детальный Тест-план (Test Plan)
●План приемочных испытаний (Product Acceptance Plan) — документ, описывающий набор действий, связанных с приемочным тестированием (стратегия, дата проведения, ответственные работники и т.д.)

Что такое Чек лист?
Чек лист — это инструмент, который используется для проверки выполнения определенных задач или критериев. Он представляет собой список пунктов, которые необходимо проверить или выполнить в процессе тестирования.

Перечислите возможные атрибуты Чек листа
· номер чек-листа 
· название 
· описание 
· дата проверки 
· интервал повторения 
· проверяющий (ФИО) 
· список объектов 
· список работ

  
Перечислите варианты статусов при прохождении Чек листа
●Passed (Пройден) — проверка прошла успешно. Используется, когда тест полностью соответствует ожидаемым результатам.
●Failed (Провален) — проверка провалилась. Это значит, что обнаружены несоответствия между фактическим результатом и ожидаемым.
●Blocked (Заблокирован) — тест не может быть выполнен из-за каких-то внешних причин. Например, недостаток данных, сбои в системе или зависимость от другой задачи, которая не завершена.
●Skipped (Пропущен) — тест был намеренно пропущен. Может быть, проверка нерелевантна для текущей версии, задачи или её выполнение не требуется.
●Not Run (Не выполнен) — тест ещё не был выполнен. Этот статус ставится до того, как проверка началась.
●N/A (Not Applicable, не применимо) означает, что проверка или тест не относится к текущему контексту, сценарию или продукту. 

 7.Что такое Тест кейс?
Тест кейс — это документ, который описывает конкретные условия, данные и шаги для выполнения теста с целью проверки определенной функции или характеристики ПО.

8. Перечислите атрибуты Тест кейса
Идентификатор (ID)- уникальная нумерация тест-кейса в виде сочетания цифр и букв.
Заголовок. Краткое описание идеи и сути тест-кейса.
Входные данные.  Указывается информация об исходном состоянии системы.
Пошаговые мероприятия. Это последовательные пункты, описывающие действия тестировщика.
Ожидаемый результат. Описание того, что тестировщик ожидает получить по окончании или в процессе тестирования.
Фактический результат:  Описание того, что тестировщик получил по факту (если необходимо).
Статус. Атрибут отражает нынешнее состояние кейса. 

9.Перечислите виды Тест кейсов
❏позитивный тест-кейс проверяет отсутствие сообщений об ошибке там, где это не предусмотрено, и исполнение системой позитивного сценария нормального использования ПО.
❏негативный тест-кейс определяет поведение системы при получении некорректных входных данных. В этом случае система не проигрывает позитивный сценарий, то есть не делает того, что не предусмотрено.
❏деструктивный тест-кейс - проверяет систему на прочность. С его помощью тестировщики изучают сценарии работы ПО в экстремальных условиях, например при повышенной нагрузке, при попытках взломать страницу или внедрить сторонние скрипты в формы регистрации.

10. Что такое Тестовый набор (Test Suite)?
Тестовый набор - это набор тестов/тест-кейсов, собранных по функциональности в последовательность для достижения некоторой цели
11. Что такое Баг репорт?
Баг репорт — это документ, в котором фиксируется информация о найденном дефекте в ПО. Он содержит описание проблемы, шаги для воспроизведения, ожидаемый и фактический результаты.
12. Какое нужно соблюдать правило в баг репорте для хорошего Summary?
Для хорошего Summary в баг репорте важно быть кратким и ясным; он должен четко отражать суть проблемы без излишних деталей.
13. Перечислите атрибуты Баг репорта?
1.ID -порядковый номер
2.Environment (окружение) на котором найден баг
3.Severity (Серьезность) - атрибут, характеризующий влияние дефекта на работоспособность приложения. Проставляется тестировщиком или техническим специалистом, который может оценить степень влияния дефекта на работу системы
4.Priority (Приоритет) - атрибут, указывающий на очередность выполнения задачи или устранения дефекта. Проставляется руководителем или менеджером проекта
5.Summary (Тайтл, описание) - раздел, который кратко передает суть бага одним предложением.
6.Precondition (Предварительное условие) - используется, если предварительно систему нужно приводить к состоянию, пригодному для проведения проверки
7.Steps (Шаги для воспроизведения) - последовательность действий для воспроизведения бага
8.Expected result (Ожидаемый результат) - описание того, как программа или функциональность должны работать
9.Actual result (Фактический результат) -  описание того, что происходит на самом деле
10.Attachment (Вложения) - файл с логами, скриншот/видео или любой другой документ, который может помочь прояснить причину ошибки или указать на способ решения проблемы
11.Author (Автор) - создатель баг-репорта
12. Assigned To (Назначен на) - имя сотрудника, назначенного на решение проблемы.

14. Опишите Жизненный цикл бага
Обнаружение бага.
Документация (создание баг репорта).
Классификация (определение приоритета и серьезности).
Исправление бага.
Проверка исправления.
Закрытие бага

15. Что такое Priority?
Priority — это уровень важности исправления дефекта, который определяет порядок его устранения.
16. Перечислите классификации Priority

⇴ P1 Наивысший (Critical) (ASAP, as soon as possible) Ошибка должна быть исправлена настолько быстро, насколько это возможно и может варьироваться от «в ближайшем билде» до единиц минут.
⇴ P2 Высокий (High)
 Ошибка должна быть исправлена как можно быстрее, т.к. ее наличие является критической для проекта.
⇴ P3 Средний (Medium) Ошибка должна быть исправлена, ее наличие не является критичной, но требует обязательного решения.
⇴ P4 Низкий (Low) Ошибка должна быть исправлена, ее наличие не является критичной, и не требует срочного решения.

17. Что такое Severity?
Severity — это уровень серьезности дефекта, который определяет влияние проблемы на функциональность ПО.

18. Перечислите классификации Severity
Blocker (блокирующий)
Critical (критический)
Major (основной)
Minor (незначительный)
Trivial (тривиальный)

19. Приведите пример Низкого Priority и Высокого Severity
Домашняя страница сайта ужасно выглядит в старых браузерах
Допустим, у нас есть приложение для банкинга. 
Редкость проявления дефекта/сложность воспроизведения для юзеров.
Невозможность попасть на страницу комментариев к товару
20. Приведите пример Низкого Severity и Высокого Priority
-Кнопки перекрывают друг друга
-Логотип компании на главной странице содержит орфографическую ошибку

21. Что такое Матрица соответствия требований (Requirements Traceability Matrix)?
Матрица соответствия требований — это документ, который связывает требования к ПО с соответствующими тестами, обеспечивая полное покрытие всех требований.

22. Что такое Тест-отчет?
Тест-отчет — это документ, который содержит результаты проведенного тестирования, включая информацию о выполненных тестах, найденных дефектах и общем состоянии качества ПО.

23. По времени Тест отчет на сколько типов возможно разделить?
Тест отчет можно разделить на два типа:	- промежуточный отчет 
- итоговый отчет

24. Что должен показывать Промежуточный отчет?
Промежуточный отчет должен показывать текущий статус выполнения тестов, количество найденных дефектов и общую оценку качества ПО на данный момент.

25. Что должен показывать Итоговый отчет?
Итоговый отчет должен содержать полную информацию о проведенном тестировании, включая все результаты, выявленные дефекты и рекомендации по улучшению качества ПО

26. Что такое Ошибка/Дефект/Отказ? 
Ошибка — это отклонение от ожидаемого поведения системы; 
Дефект — Это несоответствие между ожидаемым результатом и фактическим поведением системы (это ошибка в коде) 
Отказ — это ситуация, когда система не выполняет свою функцию.

27. Перечислите Основные типы багов? 
1.Воспроизводимый — баг, который может быть воспроизведен тестировщиком в тестовом окружении.
2.Невоспроизводимый — баг, который не может быть воспроизведен тестировщиком в тестовом окружении.
3.Фатальный — баг, который вызывает крах или аварийное завершение программы.
4.Не фатальный — баг, который не вызывает крах программы, но может приводить к некорректному поведению или неправильным результатам.
5.Функциональный  — баг, связанный с неправильной работой функциональности программы.
6.Нефункциональный — баг, связанный с аспектами производительности, надежности, безопасности и т.д. программы.
7.Интерфейсный — баг, связанный с интерфейсом пользователя.
8.Синтаксический — баг, связанный с нарушением правил синтаксиса языка программирования.
9.Логический — баг, связанный с неправильной логикой работы программы.
10.Спецификационный — баг, связанный с нарушением требований к программе, указанных в спецификации.
11.Визуальный — баг, связанный с отображением графических элементов программы.
12.Локализационный — баг, связанный с неправильным отображением или переводом программы на другие языки.
13.Неоднозначный — баг, который может иметь несколько причин и неоднозначный результат.
14.Потенциальный — баг, который еще не проявился, но может возникнуть в будущем при определенных условиях.
15.Дублирующий — баг, который уже был зарегистрирован и описан ранее.

27. Перечислите "Хитрые баги"?
Хитрые баги — это скрытые дефекты, которые трудно обнаружить из-за специфических условий их возникновения. Они могут проявляться нерегулярно, в зависимости от конфигурации системы, загрузки или временных факторов.
	Гейзенбаг — это баг, который исчезает или меняет свое поведение, как только его пытаются изучить или отладить.
Борбаг — это баг, который проявляется постоянно, но только при определенных условиях или входных данных
Мандельбаг — это баг с чрезвычайно сложным и непредсказуемым поведением, часто вызванный глубокими архитектурными дефектами системы.
Шрединбаг — это баг, который проявляется только при определённых условиях и может исчезнуть при попытке изучения кода.
Лунный баг — это баг, который проявляется только в определённое время, зависимо от даты или времени суток
Статистический баг — это баг, который не проявляется при одном прогоне, но возникает при многократном выполнении кода, генерирующего случайные или псевдослучайные результаты.
Гинденбаг — это баг, который может привести к катастрофическим последствиям для системы, особенно в критически важных инфраструктурах или колоссальным  финансовым убыткам.





28. Приведите пример Blocker bug 
Blocker bug может быть ошибка в системе аутентификации, из-за которой пользователи не могут войти в приложение.

29. Приведите пример Critical bug
Critical bug может быть ошибка в расчетах финансовых транзакций, которая приводит к потере данных пользователей.

30. Приведите пример Major bug
Major bug может быть ошибка в функциональности поиска на сайте, которая затрудняет пользователям нахождение нужной информации.

31. Приведите пример Minor bug
Minor bug может быть опечатка в тексте на странице приложения.

32. Приведите пример Trivial bug
Trivial bug может быть ошибка в отображении цвета кнопки на веб-сайте

33. Какие основные цели локализации дефекта?
Основные цели локализации дефекта включают выявление источника проблемы, понимание условий ее возникновения и разработку стратегии исправления.(Повышение эффективности отладки, Выявление и диагностика проблемы, Оптимизация процесса тестирования, Сбор информации о дефектах, Улучшение взаимодействия с командой, Повышение удовлетворенности пользователей, Обеспечение качества, Снижение рисков)

34. Где могут находиться дефекты?
Исходный код
Интерфейс пользователя (UI)
Back-end и серверная часть
Базы данных
Интеграция с внешними системами
Настройки конфигурации
Производительность и нагрузки
Безопасность
Система и окружение
Процессы и требования
Документация




35. Перечислите методы локализации дефекта в клиентской части
Анализ логов клиента.
Использование инструментов отладки.
Проведение повторных сценариев использования.
Тестирование различных конфигураций системы

36. Перечислите методы локализации дефекта в серверной части?
Анализ серверных логов.
Мониторинг производительности сервера.
Проверка взаимодействия с базой данных.
Использование инструментов профилирования
Ы