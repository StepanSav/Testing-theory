Что такое функциональное тестирование (Functional/Behavioral testing)?
    Функциональное тестирование выполняется чтобы убедиться, что каждая функция программного приложения ведет себя так, как 
    указано в документе с требованиями.

Что такое нефункциональное тестирование (Non-Functional testing)?
    Нефункциональное тестирование - это тип тестирования, направленный на проверку аспектов программного обеспечения, не связанных непосредственно 
    с его функциональностью. Этот вид тестирования оценивает характеристики системы, которые не связаны с конкретными функциями продукта, такие как 
    производительность, масштабируемость, безопасность, надежность, совместимость, удобство использования и другие атрибуты.

Какие виды тестирования относятся к функциональному тестированию?
    Unit Testing, Smoke Testing, Sanity Testing, Regression Tests, Integration Test, System Testing, Acceptance Testing 

Какие виды тестирования относятся к нефункциональному тестированию?
    Performance Testing, Load Testing, Stress Testing, Security Testing, Compatibility Testing, Reliability Testing, Usability Testing, Accessibility Testing

Что такое Статическое/Динамическое тестирование?
     Статическое тестирование — это процесс анализа программного кода, документации и других артефактов разработки без выполнения
    кода. Целью статического тестирования является выявление ошибок на ранних стадиях разработки, что позволяет сэкономить время и ресурсы.
    Статическое тестирование может включать ревизию кода, проверку стиля кода, тестирование требований к системе и другие методы, которые
    позволяют проверить качество кода и документов без выполнения программы.
     Динамическое тестирование — подразумевает запуск кода для проведения функциональных и нефункциональных проверок ПО. Основная цель 
    этого тестирования - подтвердить, что программный продукт работает в соответствии с требованиями бизнеса.
    Динамическое тестирование может включать различные методы, такие как модульное тестирование, интеграционное тестирование, системное 
    тестирование и приемочное тестирование. Обычно динамическое тестирование используется после статического тестирования, когда программный 
    код уже был проверен на наличие очевидных ошибок.

Что такое Черный/Серый/Белый ящик тестирования(White/Black/Grey Box testing)?
     Black-box testing - Вид тестирования, не требующий знаний о внутреннем устройстве программного обеспечения. Используя этот вид проверок,
    тестировщик не имеет доступа к внутренним структурам и коду системы и тестирует ПО так, как это делал бы обычный пользователь.
     Grey-box testing - Основывается на частичном доступе и знаниях о внутренней структуре системы. Например, тестировщик может иметь доступ 
    только к базе данных продукта, но не иметь доступа к его программному коду.
     White-box testing - Вид тестирования, подразумевающий полный доступ ко всем внутренним структурам и программному коду продукта. 

Что такое Компонентное(Component or Unit Testing)/Интеграционное (Integration Testing)/Системное (System Testing)/Приемочное тестирования (Acceptance Testing)?
     Unit Testing - используется для тестирования какого-либо одного логически выделенного и изолированного элемента системы в коде.
    Как правило, юнит-тесты проводятся непосредственно разработчиками, позволяя на самом начальном этапе определить ошибки кода, возможные 
    дефекты алгоритмов.
     Integration Testing - направлено на проверку взаимодействия между программными модулями для обеспечения их корректной совместной работы.  
    Главная цель интеграционного тестирования — подтвердить, что различные программные компоненты, модули и подсистемы работают вместе как 
    единая система, обеспечивая требуемую функциональность и производительность.
     System Testing - Системное тестирование означает тестирование всей системы в целом, оно выполняется после интеграционного тестирования, 
    чтобы проверить, работает ли вся система целиком должным образом. В основном это тестирование типа «черный ящик», которое оценивает 
    работу системы с точки зрения пользователя с помощью документа спецификации и оно не требует каких-либо внутренних знаний о системе, 
    таких как дизайн или структура кода. 
    Основное внимание уделяется следующему: Внешние интерфейсы;
                                            Многопрограммность и сложный функционал;
                                            Безопасность;
                                            Восстановление;
                                            Производительность;
                                            Гладкое (smooth) взаимодействие оператора и пользователя с системой;
                                            Возможность установки;
                                            Документация;
                                            Удобство использование;
                                            Нагрузка / стресс;
     Acceptance Testing - Это метод тестирования черного ящика, при котором проверяется только функциональность, чтобы убедиться, что 
    продукт соответствует указанным критериям приемки.
        - User Acceptence Testing (UAT) выполняется клиентом или пользователем чтобы определить, может ли ПО быть принято или нет и проверить
        ПО на соответствие бизнес-требованиям;
        - Business Acceptance Testing (BAT) необходимо для оценки того, соответствует ли Продукт бизнес-целям и задачам.
        - Contract Acceptance Testing (CAT) - это контракт, который определяет, что после того, как Продукт будет запущен в течение заранее 
        определенного периода, должен быть проведен приемочный тест, и он должен пройти все приемочные тест-кейсы.
        - Operational Acceptance testing (OAT) - это тип тестирования программного обеспечения, который оценивает эксплуатационную готовность 
        программного приложения до его выпуска в производство. Целью эксплуатационного тестирования является обеспечение бесперебойной работы 
        системы в ее стандартной эксплуатационной среде (SOE - standard operating environment).
        - Alpha Testing - проводят для оценки продукта в среде разработки / тестирования специализированной командой тестировщиков.
        - Beta Testing - проводят для оценки Продукта, предоставляя его реальным конечным пользователям в их среде.

Что такое Позитивное/Негативное тестирование?
    Позитивное тестирование – это тестирование с применением сценариев, которые соответствуют нормальному (штатному, ожидаемому) поведению 
    системы. С его помощью мы можем определить, что система делает то, для чего и была создана.
    Негативным называют тестирование, в рамках которого применяются сценарии, которые соответствуют внештатному поведению тестируемой системы. 
    Это могут быть исключительные ситуации или неверные данные.

Что такое Альфа (Alpha Testing)/Бета тестирование(Beta Testing)?
    Альфа-тестирование (Alpha Testing) проводят для оценки продукта в среде разработки / тестирования специализированной командой тестировщиков, 
    обычно называемой альфа-тестерами. Здесь отзывы и предложения тестировщиков помогают улучшить использование Продукта, а также исправить 
    определенные ошибки;
    Бета-тестирование, полевые испытания (Beta Testing, Field Testing) проводят для оценки Продукта, предоставляя его реальным конечным 
    пользователям, обычно называемым бета-тестерами / бета-пользователями, в их среде. Собирается постоянная обратная связь от пользователей, 
    и проблемы устраняются. Кроме того, это помогает в улучшении Продукта, чтобы обеспечить удобство работы пользователей. Тестирование происходит 
    неконтролируемым образом, что означает, что у пользователя нет ограничений на использование Продукта.

Что такое Интуитивное/Исследовательское тестирование?
     Интуитивное тестирование (ad hoc testing): полностью неформализованный подход, в котором не предполагается использования ни тест-кейсов, 
    ни чек-листов, ни сценариев — тестировщик полностью опирается на свой профессионализм и интуицию (experience-based testing) для спонтанного 
    выполнения с приложением действий, которые, как он считает, могут обнаружить ошибку.
     Исследовательское тестирование (Exploratory testing) — частично формализованный подход, в рамках которого тестировщик выполняет работу с 
    приложением по выбранному сценарию, который, в свою очередь, дорабатывается в процессе выполнения с целью более полного исследования приложения.
    Подход к тестированию, при котором тестировщики одновременно изучают приложение, проектируют и выполняют тесты. 

Что такое Gorilla testing/ Monkey testing?
     Monkey testing – это метод тестирования при разработке программного обеспечения, при котором QA инженер предоставляет приложению случайные 
    входные данные без использования каких-либо тестовых примеров, которые могут привести к сбою системы. Этот метод применяется ко всей системе и 
    используется для обнаружения ошибок, которые трудно обнаружить традиционными методами тестирования.
     Gorilla Testing это метод тестирования программного обеспечения, который фокусируется на тестировании конкретных функций или модулей приложения 
     с помощью интенсивного, часто повторяющегося взаимодействия. Этот подход позволяет выявить ошибки и недостатки, которые могут быть пропущены при 
     стандартном тестировании. Тестировщик проводит многоразовые и интенсивные тесты на одних и тех же функциях, чтобы проверить их стабильность и 
     производительность.

Что такое Дымовые (Smoke)/Ре-тест (Re-test)/ Санити (Sanity)/Регрессионное (Regression) тестирование?
    Smoke testing (дымовое тестирование)
        это минимальный набор тестов, который проверяет основные функции системы или компонента. Задача – проверить, работает ли система в общих 
        чертах, без детальной проверки. Исходя из того, что данные проверки практически всегда одинаковы и редко претерпевают изменения, целесообразно 
        их автоматизировать. Smoke-тестирование проверяет систему на условное «возгорание», сразу после ее установки или изменений, а также перед 
        запуском. Smoke проверяет рабочее состояние новой сборки.
    Re-test
        Это повторное тестирование того же функционала после исправления дефекта. Цель — убедиться, что проблема действительно решена.
    Sanity testing
        Sanity testing является подвидом регрессионного тестирования. Регрессионное тестирование касается многих областей приложения; санитарное — 
        только некоторой части, определяя качество продукта в этой части и готовность продукта к дальнейшему тестированию. Проверяет изменения, которые 
        были сделаны в текущей сборке. Обычно такое тестирование проводится на билдах, развертывание которых нужно здесь и сейчас, например после 
        устранения критикал-бага.
    Регрессионное тестирование (Regression Testing) -
        Собирательное название для всех видов тестирования программного обеспечения связанных с 
        изменениями, направленных на обнаружение ошибок в уже протестированных участках исходного кода, на проверку того, что новая функциональность 
        не зааффектила (affect) старую. Такие ошибки - когда после внесения изменений в программу перестаёт работать то, что должно было продолжать 
        работать, - называют регрессионными ошибками (regression bugs). Регрессионные тесты должны быть частью релизного цикла (Release Cycle) и 
        учитываться при тестовой оценке (test estimation). Регрессионное тестирование обычно проводится перед релизом новой версии приложения.

Что такое Тестирование нового функционала/ Приемочное тестирование?
    New Feature Testing - процесс тестирования новых функций или компонентов программного обеспечения перед их выпуском в рабочую среду. 
    Приемочное тестирование (UAT) — это финальная фаза тестирования перед релизом, где конечные пользователи проверяют систему на соответствие 
    их ожиданиям.

Что такое Ручное/Автоматизированное/Полуавтоматизированное тестирование?
     Ручное тестирование (Manual testing) — тестирование, в котором тесткейсы выполняются человеком вручную без использования средств автоматизации.
     Автоматизированное тестирование (Automation testing) — набор техник, подходов и инструментальных средств, позволяющий исключить человека из 
    выполнения некоторых задач в процессе тестирования. Однако разработка тест-кейсов, подготовка данных, оценка результатов выполнения, написания 
    отчётов об обнаруженных дефектах — всё это и многое другое по-прежнему делает человек.
     Смешанное/полуавтоматизированное тестирование - При полуавтоматическом тестировании, ручной подход сочетается с автоматизированным. 
    Зачастую бывает удобно создавать необходимые условия для проведения тестов автоматически а затем уже выставлять вердикт вручную. Данный тип 
    тестирования применяется в случаях, когда полная автоматизация невозможна или невыгодна.

На основании чего происходит разработка тестовых сценариев?
     На основе требований (Requirements based testing)- Тестирование на основе требований ориентировано на проверку соответствия программного 
    обеспечения формализованным требованиям, предъявленным к нему. Этот вид тестирования направлен на проверку того, что каждая функциональность, 
    описанная в спецификации требований, была реализована правильно и соответствует ожиданиям.
     По вариантам использования (Use case based)- Тестирование по вариантам использования ориентировано на проверку того, как система будет 
    использоваться пользователями. Оно включает разработку сценариев на основе реальных случаев использования системы (use cases), описывающих 
    последовательность действий, выполняемых пользователем для достижения определенной цели.
     На основе модели (Model based)- Тестирование на основе моделей использует модели системы для генерации тестовых сценариев. Эти модели могут 
    представлять собой диаграммы состояний, диаграммы потоков данных или другие формальные описания поведения системы.

Что такое Frontend / Backend?
    Frontend и Backend - это две ключевые составляющие веб-разработки, и они отвечают за различные аспекты веб-приложения или сайта.
	Frontend отвечает за то, что пользователь видит и с чем взаимодействует, когда посещает веб-сайт или использует веб-приложение. Он включает 
    в себя интерфейс, с которым пользователь непосредственно взаимодействует, такой как внешний вид, расположение элементов, анимации, и, конечно же, 
    контент. HTML, CSS и JavaScript являются основными технологиями для создания Frontend-а. HTML определяет структуру страницы, CSS отвечает за 
    ее визуальное оформление, а JavaScript - за интерактивность и динамическое поведение элементов на странице. Они работают в браузере пользователя 
    и отображают информацию.
	Backend - это то, что происходит за кулисами. Это серверная сторона веб-приложения, которая обрабатывает данные, взаимодействует с базой данных, 
    обеспечивает бизнес-логику, обрабатывает запросы от Frontend и отправляет им обратно необходимые данные. Технические стеки разработки для бэкенда 
    могут варьироваться, но обычно они включают в себя языки программирования (например, Node.js, Python, Ruby, Java), базы данных (например, 
    PostgreSQL, MongoDB, MySQL) и серверное программное обеспечение, которое управляет запросами.
	Фронтенд и бэкенд взаимодействуют друг с другом через сеть (например, Интернет), обмениваясь данными и запросами, чтобы предложить пользователям 
    отзывчивый и полноценный пользовательский опыт.

Что такое тестирование безопасности?
    Тестирование безопасности, также известное как тестирование на проникновение (penetration testing) или этичное взломщичество (ethical hacking), 
    является процессом проверки информационной системы, приложения или сети на наличие уязвимостей, которые могут быть использованы злоумышленниками 
    для несанкционированного доступа, повреждения данных или прерывания работы системы.
	Цель тестирования безопасности заключается в обнаружении и устранении потенциальных уязвимостей в системе до того, как они могут быть злоупотреблены. 
    Тестирование безопасности может включать различные методы, такие как сканирование уязвимостей, анализ кода, атаки "черного ящика" и "белого ящика", 
    социальная инженерия и другие техники, которые имитируют действия реальных злоумышленников.
	Процесс тестирования безопасности обычно включает в себя следующие шаги:
        Сбор информации: Оценка информации о целевой системе, такой как IP-адреса, домены, конфигурация сети и другая публично доступная информация.
        Анализ уязвимостей: Использование различных инструментов и техник для обнаружения уязвимостей в системе, включая сканирование на предмет 
        известных уязвимостей.
        Эксплойтация уязвимостей: Попытка использовать обнаруженные уязвимости для получения несанкционированного доступа к системе.
        Отчетность: Подготовка отчета, содержащего обнаруженные уязвимости и рекомендации по их устранению.
        Тестирование безопасности играет важную роль в обеспечении защиты информационных систем от кибератак и обеспечивает повышенный уровень 
        безопасности для всей системы.

Перечислите Принципы безопасности программного обеспечения
    - Конфиденциальность означает, что конфиденциальная информация должна быть защищена от несанкционированного доступа. Этот принцип обеспечивает 
    защиту личных данных, коммерческой информации, государственных секретов и других конфиденциальных данных от несанкционированного доступа.
    - Целостность означает, что данные должны быть защищены от изменения несанкционированными лицами. Этот принцип гарантирует, что информация, 
    которая передается и хранится, не будет изменена, повреждена или уничтожена.
    - Доступность означает, что информация должна быть доступна только тем, кто имеет на это право. Этот принцип гарантирует, что информация 
    доступна и используется только теми, кто имеет право на ее использование, и что она не будет заблокирована или недоступна из-за непредвиденных 
    событий или действий злоумышленников.
    - Аутентификация и авторизация пользователей — это процессы, которые используются для определения легитимности пользователей и предоставления им 
    прав доступа к системе. Аутентификация — это процесс проверки подлинности пользователя, который включает в себя, например, подтверждение его 
    личности с помощью пароля. Авторизация, с другой стороны, определяет уровень доступа пользователя к данным и ресурсам после его аутентификации. 
    Важно понимать, что аутентификация происходит первой, и только после этого осуществляется авторизация, которая ограничивает возможности пользователя 
    в системе.
    - Шифрование данных — это процесс преобразования данных в неразборчивый вид, чтобы они не могли быть прочитаны или использованы злоумышленниками.

Перечислите виды уязвимостей в безопасности программного обеспечения
    - Инъекции — это уязвимости, связанные с возможностью внедрения зловредного кода в приложение через входные данные, такие как поля форм, URL-адреса, 
    файлы и т.д.
    - Недостаточная авторизация и аутентификация — это уязвимости, связанные с отсутствием или недостаточной проверкой подлинности пользователей, что 
    может привести к несанкционированному доступу к системе, краже учетных данных и т.д.
    - Утечки информации — это уязвимости, связанные с некорректным хранением или передачей конфиденциальной информации.
    - Недостатки в защите приложения — это уязвимости, связанные с недостаточной защитой приложения от внешних атак, таких как DDoS-атаки, переполнение 
    буфера, уязвимости в системе контроля доступа и т.д.
    - Уязвимости в софте третьих сторон — это уязвимости, связанные с использованием приложением стороннего кода, который может содержать уязвимости, 
    такие как небезопасные библиотеки и фреймворки, открытые порты, уязвимости в настройках и т.д.

Что такое Тестирование на отказ и восстановления Failover and Recovery Testing?
     Тести рование на отказ и восстановление (Failover and Recovery Testing) - это процесс тестирования системы или приложения с целью определения того, 
    насколько хорошо система восстанавливается после отказа (какого-либо сбоя или отказа в работе).
	 Тестирование на отказ и восстановление (Failover Testing) включает в себя создание ситуаций, при которых часть инфраструктуры или ключевые компоненты 
    системы намеренно выходят из строя, чтобы проверить, как система реагирует на такие события. Это может включать в себя отключение серверов, сбои сетевых 
    устройств, потерю подключения к базе данных и так далее.
	 Цель тестирования на отказ и восстановление - убедиться, что система продолжает работать в условиях отказа и восстанавливается после возникновения проблем.
	Этот процесс важен для обеспечения непрерывности бизнес-процессов, особенно в случае критически важных систем, где даже небольшой период недоступности 
    может привести к серьезным последствиям.
	 Тестирование на отказ и восстановление часто проводится в сочетании с другими видами тестирования, такими как тестирование производительности, 
    тестирование масштабируемости и тестирование восстановления после аварии для обеспечения полной готовности системы к возможным сбоям. 

Что такое тестирование Эффективности использования ресурсов?
     Тестирование эффективности использования ресурсов (Resource Utilization Testing) относится к процессу оценки того, как система использует доступные 
    ей ресурсы во время выполнения. Это включает в себя проверку того, насколько эффективно система использует процессорное время, память, сетевые ресурсы, 
    хранилище и другие ресурсы во время своей работы.
	 Целью тестирования эффективности использования ресурсов является выявление узких мест в системе, которые могут привести к неэффективному использованию 
    ресурсов или даже к полной блокировке работы системы. Такой анализ позволяет оптимизировать использование ресурсов системы, обеспечивая более плавную 
    и эффективную работу.
	 Примеры включают в себя измерение использования процессора во время выполнения определенных задач, мониторинг потребления памяти при выполнении 
    определенных операций, а также изучение использования сетевых ресурсов или хранилища данных.
	Это важный аспект тестирования, особенно при разработке крупных приложений или при создании систем, работающих на ресурсоемких устройствах, таких 
    как встраиваемые системы или высоконагруженные серверы. Тестирование эффективности использования ресурсов помогает обнаружить проблемы, связанные 
    с утечками ресурсов, неэффективными процессами и другими аспектами, которые могут отрицательно сказаться на производительности и стабильности системы.

Что такое тестирование Масштабируемости (Scalability testing)?
     Тестирование масштабируемости (Scalability Testing) представляет собой процесс оценки способности программного обеспечения, системы или приложения 
    эффективно масштабироваться в ответ на увеличение объема нагрузки. Это важная часть тестирования производительности, которая оценивает способность 
    системы сохранять стабильность и производительность при увеличении рабочей нагрузки.
	 Основная цель тестирования масштабируемости - определить, насколько система или приложение могут поддерживать большее количество пользователей, 
    объем данных или транзакций, не теряя производительности. При проведении этих тестов проверяется, насколько система может масштабироваться вертикально 
    (путем добавления ресурсов к отдельному узлу) или горизонтально (путем добавления новых узлов или серверов).
	 Основные характеристики, которые обычно оцениваются при проведении тестов масштабируемости, включают:
	Производительность: Как изменяется производительность системы при увеличении нагрузки, такой как количество пользователей или объем данных.
	- Нагрузочное тестирование: Оценка того, как система справляется с увеличением нагрузки, идентификация точек отказа и определение максимальной нагрузки, 
    которую система может выдержать.
	- Горизонтальное и вертикальное масштабирование: Оценка способности системы масштабироваться путем добавления ресурсов (вертикальное масштабирование) 
    или путем расширения по горизонтали (горизонтальное масштабирование).
	- Тестирование масштабируемости имеет большое значение для платформ, приложений и систем, которые могут ожидать увеличения нагрузки со временем или 
    планируют масштабироваться для поддержки большего числа пользователей или операций.

Что такое тестирование Производительности (Performance testing)/Load testing/Stress testing/Volume testing?
    - Тестирование производительности (Performance Testing) является одной из важных составляющих общего процесса тестирования программного обеспечения. 
    Оно оценивает, насколько хорошо приложение или система выполняют определенные функции при определенной нагрузке. Вот более подробные объяснения для 
    типов тестирования производительности, которые вы упомянули:
	- Load Testing (Тестирование нагрузки): Этот тип тестирования оценивает реакцию системы на увеличение рабочей нагрузки, обычно путем увеличения числа 
    одновременно работающих пользователей или объема обрабатываемых данных. Целью является измерение производительности при различных уровнях загрузки, 
    определение момента, когда система перестает успешно обрабатывать запросы, и выявление возможных узких мест.
	- Stress Testing (Тестирование под нагрузкой): Этот вид тестирования предназначен для проверки границ системы, т.е. оценки поведения приложения или 
    системы при экстремальных условиях, когда нагрузка превышает ожидаемый уровень - это может включать как очень высокие значения, так и резкие изменения 
    нагрузки. Цель состоит в выявлении пределов нагрузки, при которых система перестает работать устойчиво или эффективно.
	- Volume Testing (Тестирование объема данных): Этот вид тестирования направлен на оценку способности системы обрабатывать большие объемы данных. Целью 
    является выявление эффектов, которые могут возникнуть при увеличении объема данных, таких как утечки памяти, ухудшение производительности и т.д. Важно 
    понять, как система реагирует на рост объема данных, чтобы предотвратить будущие проблемы с производительностью.
	 Все эти типы тестирования имеют ключевое значение для обеспечения того, что приложения и системы работают эффективно, надежно и масштабируемо при 
     различных уровнях нагрузки и объемов данных.

Что такое тестирование Надежности(Reliability Testing)?
     Тестирование надежности (Reliability Testing) - это процесс оценки стабильности и надежности программного обеспечения в различных условиях. Целью 
    тестирования надежности является определение того, насколько долго приложение может функционировать без сбоев в реальных условиях эксплуатации.
	Основные аспекты тестирования надежности включают в себя:
	- Стабильность: Определение способности программного обеспечения работать продолжительное время без сбоев. Это включает в себя проверку наличия утечек памяти, 
    надежность работы при длительной нагрузке и другие аспекты, влияющие на стабильность работы приложения.
	- Восстановление после сбоев: Оценка способности программного обеспечения быстро восстановиться после возможных сбоев или отказов. Это может включать в себя 
    проверку процесса восстановления после аварийного завершения работы приложения или после возобновления работы операционной системы.
	- Устойчивость к ошибкам: Оценка способности программного обеспечения работать корректно и надежно даже в случае возникновения неожиданных ситуаций, таких 
    как некорректный ввод данных или отключение основных сервисов.
	- Долгосрочное тестирование: Проведение тестирования на протяжении длительного времени для проверки стабильности работы приложения в условиях реальной 
    эксплуатации.
	Тестирование надежности играет важную роль при обеспечении высокого уровня качества программного обеспечения, особенно в случаях, когда на него возлагаются 
    значительные ожидания по устойчивости и продолжительности работы.

Что такое тестирование Стабильности (Stability Testing)?
     Тестирование стабильности (Stability Testing) - это тип тестирования программного обеспечения, направленный на проверку устойчивости системы при её 
    непрерывной работе в заданных условиях или при нагрузке. Целью такого тестирования является обнаружение проблем, таких как утечки ресурсов, накопление 
    ошибок с течением времени, нестабильное поведение и выход из строя вследствие длительных периодов работы.
	 Процесс тестирования стабильности включает в себя следующие аспекты:
	- Длительная работа приложения: Тестирование проводится на протяжении длительного времени для проверки, как приложение ведет себя при непрерывной работе. 
    Это позволяет выявить потенциальные проблемы, связанные с деградацией производительности или ресурсов со временем.
	- Мониторинг ресурсов: В ходе тестирования системно отслеживается использование ресурсов, таких как память, процессорное время, сетевой трафик и другие 
    параметры, чтобы обнаружить возможные утечки ресурсов или другие проблемы.
	- Реакция на экстремальные условия: Программное обеспечение подвергается нагрузке, например, высокой нагрузке на процессор, большому количеству запросов 
    или аномальным условиям, для проверки того, как оно реагирует на такие ситуации.
	- Восстановление после сбоев: Включает в себя проверку способности системы восстановиться после сбоев или аварийного завершения работы, а также устойчивость 
    к потере связи с внешними ресурсами.
	 Тестирование стабильности помогает определить, насколько надежно и стабильно работает программное обеспечение в условиях реальной эксплуатации, что позволяет 
    выявить и устранить потенциальные проблемы, повысить качество и надежность разрабатываемых систем.

Что такое тестирование Удобства использования(Usability testing)?
     Тестирование удобства использования (Usability Testing) - это метод тестирования, целью которого является оценка того, насколько легко пользователи могут 
    использовать определенный продукт, будь то веб-сайт, приложение, устройство или другая система. В процессе тестирования удобства использования акцент 
    делается на опыте пользователя при взаимодействии с продуктом, его понимании функционала, а также на уровне удовлетворенности и эффективности 
    в выполнении задач.
	 Процесс тестирования удобства использования включает в себя следующие шаги:
	- Определение целей тестирования: Определение ключевых задач и сценариев использования, которые будет оценивать тестирование.
	- Разворачивание тестового сценария: Участники тестирования проходят через набор задач, которые представляют типичные сценарии использования продукта.
	- Наблюдение и сбор обратной связи: Наблюдатели фиксируют, как пользователи выполняют задачи, а также получают обратную связь от участников тестирования.
	- Анализ результатов: Полученная информация используется для оценки того, какие аспекты проекта нуждаются в улучшениях для повышения удобства использования.
	- Внесение изменений: На основе результатов тестирования производится анализ и внесение изменений в продукт с целью улучшения его удобства использования.
	 Тестирование удобства использования позволяет команде разработчиков и дизайнеров получить обратную связь от реальных пользователей, выявить проблемы, 
    с которыми могут столкнуться пользователи, и внести соответствующие улучшения. Этот процесс способствует созданию продуктов, которые лучше соответствуют 
    потребностям и ожиданиям целевой аудитории.

Что такое тестирование Pixel Perfect? Какие инструментами можно пользоваться при тестировании Pixel Perfect?
     Тестирование Pixel Perfect - это процесс проверки соответствия макета (дизайна) итоговому пользовательскому интерфейсу с максимальной точностью, чтобы 
    гарантировать, что каждый пиксель, каждое измерение и каждый элемент на экране точно соответствуют заданным в дизайне. Это особенно важно в веб-разработке, 
    разработке мобильных приложений и других сферах, где точное соответствие макету имеет высокое значение.
	 Для проведения тестирования Pixel Perfect можно использовать следующие инструменты:
	- Графические редакторы: Adobe Photoshop, Sketch, Figma, Adobe XD - эти инструменты используются для создания дизайнов пользовательского интерфейса и часто 
    включают возможность измерения и проверки размеров и отступов элементов.
	- Инструменты для замеров и проверки:
	Pixel Ruler: Pixel Ruler - это программное обеспечение, которое позволяет измерять экраны и элементы на них в пикселях.
    Модули проверки макета в графических редакторах: Некоторые графические редакторы имеют встроенные инструменты для измерения и проверки соответствия макета.
    Инструменты разработчика в браузере (DevTools): Инструменты разработчика позволяют анализировать элементы веб-страницы, измерять отступы, размеры и другие 
    характеристики элементов на экране.
	Сервисы для сравнения макетов: Существуют онлайн-сервисы, которые помогают сравнивать макеты и фактические интерфейсы для обнаружения различий.
	Тестирование на реальных устройствах: Важно также проверять Pixel Perfect на реальных устройствах, так как различные экраны и устройства могут отображать 
    интерфейс по-разному из-за различий в плотности пикселей, размерах экрана и других факторах.
	Тестирование Pixel Perfect помогает обеспечить высокое качество визуального представления пользовательского интерфейса, что важно для создания профессионально 
    выглядящих и функциональных веб-сайтов и приложений.

Что такое тестирование Локализации// Совместимости/ Адаптивности?
     Тестирование локализации, совместимости и адаптивности - это специфические типы тестирования, связанные с обеспечением соответствия программного обеспечения, 
    веб-сайтов или мобильных приложений различным языкам, культурам, устройствам и экранам.
	- Тестирование локализации:
	Локализация включает адаптацию программного обеспечения к языку, культуре и требованиям конкретного региона.
	Тестирование локализации включает проверку корректного перевода интерфейса, дат, времени, валюты, форматов номеров телефона и адресов для различных регионов, 
    а также адаптацию к особенностям правописания и традиций. Также проверяется, что локализованный интерфейс не нарушает функциональность программного 
    обеспечения или приложения.
	- Тестирование совместимости:
	 Этот тип тестирования проверяет, как программа или веб-сайт работают на различных устройствах (например, на компьютерах, планшетах, мобильных телефонах) и 
    в различных окружениях (разные браузеры, операционные системы).
     Такое тестирование включает в себя проверку того, что приложение работает корректно на разных устройствах, разрешениях экранов, а также в различных браузерах.
	- Тестирование адаптивности:
	 Тестирование адаптивности связано с проверкой того, как веб-сайты или приложения реагируют на различные размеры экранов и ориентации (горизонтальную и 
    вертикальную) на мобильных устройствах и планшетах.
     Это также включает проверку того, что элементы пользовательского интерфейса адекватно перескакивают и перестраиваются для обеспечения удобства использования 
    на различных устройствах.
     Все эти типы тестирования имеют свою важность для обеспечения качества программного обеспечения и удовлетворения потребностей различных пользователей в разных 
    частях мира и на различных устройствах.

Что такое тестирование установки (Installation Testing)?
     Тестирование установки (Installation Testing) – это процесс проверки процедуры установки программного обеспечения, включая установку, обновление и удаление 
    программы на целевой системе. Целью этого тестирования является убеждение в том, что процесс установки и удаления программы происходит без проблем и 
    соответствует ожиданиям пользователя.
	 Тестирование установки включает в себя следующие аспекты:
	- Установка: Проверка, успешно ли происходит установка программного обеспечения на целевой системе (компьютере, сервере, мобильном устройстве и т. д.).
     Проверка правильности действий инсталлятора (например, создание ярлыков, добавление записей в реестре, размещение файлов в нужных директориях).
	- Обновление: Проверка процедуры обновления программного обеспечения с предыдущей версии на новую без потери данных или нарушения функциональности.
	- Удаление: Проверка, успешно ли происходит удаление программы из системы с полным удалением всех созданных при установке файлов и записей в системе.
	- Совместимость: Проверка совместимости установленного программного обеспечения с другими приложениями на целевой системе.
	- Роллбэк: Проверка возможности возврата к предыдущей версии программы или к предыдущему состоянию системы в случае проблем при установке или обновлении.
	- Тестирование на разных конфигурациях: Проверка процесса установки на различных конфигурациях систем и на разных версиях операционных систем.
	 Этот вид тестирования обычно проводится вместе с функциональным и совместимостным тестированием для обеспечения того, что установка программного 
    обеспечения происходит корректно и без проблем на различных целевых системах.   

Что такое ETL-тестирование/Тестирование перед миграцией (Pre-Migration testing)/Миграционное тестирование (Migration testing)/Тестирование после миграции
(Post-Migration testing)?
	- ETL расшифровывается как Extract, Transform, Load, что означает извлечение данных из различных источников, их трансформацию и загрузку в целевую базу 
    данных или хранилище данных. ETL-тестирование включает в себя проверку процесса извлечения, трансформации и загрузки данных, убеждаясь в том, что данные 
    успешно переносятся и сохраняют целостность.
	- Тестирование перед миграцией (Pre-Migration testing):
	 Тестирование, которое осуществляется перед тем, как данные или система будут перенесены на новую платформу или в новую среду. Цель - удостовериться, 
    что данные и системы готовы к миграции, и что процесс миграции не приведет к потере данных или нарушению функциональности.
	- Миграционное тестирование (Migration testing):
	Это проверка процесса переноса данных, приложений и других элементов системы из одного места в другое. Включает в себя тестирование целостности данных, 
    проверку правильности переноса, а также проверку всех связанных процессов и функциональности после миграции.
	- Тестирование после миграции (Post-Migration testing):
	 Тестирование, которое выполняется после завершения процесса миграции, чтобы гарантировать, что данные были успешно перенесены, функциональность 
    поддерживается, и система работает корректно в новой среде.
	Эти виды тестирования часто используются в контексте изменения инфраструктуры, обновления систем или переноса данных, чтобы обеспечить плавный и 
    безопасный переход на новую платформу без потери данных или нарушения работы системы.